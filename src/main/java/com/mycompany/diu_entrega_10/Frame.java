/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.diu_entrega_10;

import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.zip.*;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.ListSelectionModel;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author alber
 */
public class Frame extends javax.swing.JFrame {

    DefaultListModel filesModel = new DefaultListModel();
    JFileChooser fc = new JFileChooser();
    FileNameExtensionFilter filtro = null;
    List<String> files = new ArrayList<String>();
    List<File> list = new ArrayList<File>();
    List<String> listNames = new ArrayList<>();
    List<String> names = new ArrayList<>();
    JProgressBar progressBar = new JProgressBar(JProgressBar.HORIZONTAL);
    JDialog dialog;

    private class Compress extends SwingWorker<Void, Void> {

        @Override
        protected Void doInBackground() throws Exception {
            try {
                // Objeto para referenciar a los archivos que queremos comprimir
                BufferedInputStream origin = null;
                // Objeto para referenciar el archivo zip de salida
                FileOutputStream dest = new FileOutputStream(fc.getSelectedFile() + ".zip");
                ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(dest));
                int BUFFER_SIZE = 256;
                // Buffer de transferencia para almacenar datos a comprimir
                byte[] data = new byte[BUFFER_SIZE];

                Iterator i = files.iterator();
                double j = 0;
                while (i.hasNext()) {
                    String filename = (String) i.next();
                    FileInputStream fi = new FileInputStream(filename);
                    origin = new BufferedInputStream(fi, BUFFER_SIZE);
                    ZipEntry entry = new ZipEntry(names.get((int) j));
                    out.putNextEntry(entry);
                    // Leemos datos desde el archivo origen y se envían al archivo destino
                    int count;
                    while ((count = origin.read(data, 0, BUFFER_SIZE)) != -1) {
                        out.write(data, 0, count);
                    }
                    double a = (j / (double) files.size()) * 100;
                    progressBar.setValue((int) a);
                    j++;
                    Thread.sleep(500);
                    // Cerramos el archivo origen, ya enviado a comprimir
                    origin.close();
                }
                // Cerramos el archivo zip
                out.close();
            } catch (InterruptedException e) {
                JOptionPane.showMessageDialog(rootPane, "Compresión cancelada", "Compresión cancelada", JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        @Override
        protected void done() {
            files.clear();
            names.clear();
            dialog.dispose();
        }

    }

    public Frame() {
        initComponents();
        this.setTitle("Compresor de archivos - Jorge Marrero & Alberto Mejias");
        filesList.setModel(filesModel);
        multipleSelBtn.setSelected(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        SelectFolderLabel = new javax.swing.JLabel();
        selectFolderBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        filesList = new javax.swing.JList<>();
        multipleSelBtn = new javax.swing.JRadioButton();
        contSelBtn = new javax.swing.JRadioButton();
        singleSelBtn = new javax.swing.JRadioButton();
        zipFilesBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        SelectFolderLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        SelectFolderLabel.setText("Selecciona una carpeta para mostrar sus archivos");

        selectFolderBtn.setText("Seleccionar carpeta");
        selectFolderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFolderBtnActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(filesList);

        buttonGroup.add(multipleSelBtn);
        multipleSelBtn.setText("Selección Múltiple");
        multipleSelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multipleSelBtnActionPerformed(evt);
            }
        });

        buttonGroup.add(contSelBtn);
        contSelBtn.setText("Selección Continua");
        contSelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contSelBtnActionPerformed(evt);
            }
        });

        buttonGroup.add(singleSelBtn);
        singleSelBtn.setText("Selección Única");
        singleSelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleSelBtnActionPerformed(evt);
            }
        });

        zipFilesBtn.setText("Comprimir archivos");
        zipFilesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zipFilesBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SelectFolderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectFolderBtn)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(singleSelBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(contSelBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(multipleSelBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(zipFilesBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SelectFolderLabel)
                    .addComponent(selectFolderBtn))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(multipleSelBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(contSelBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(singleSelBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(zipFilesBtn)))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectFolderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFolderBtnActionPerformed
        filesList.removeAll();
        filesModel.removeAllElements();
        list.clear();
        files.clear();
        listNames.clear();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setAcceptAllFileFilterUsed(false);
        int op = fc.showOpenDialog(null);
        if (op == JFileChooser.APPROVE_OPTION) {
            File fichero = fc.getSelectedFile();
            list = new ArrayList<>(Arrays.asList(fichero.listFiles()));
            for (File file : list) {
                listNames.add(file.getName());
            }
            filesModel.addAll(listNames);
            filesList.setModel(filesModel);
        }
    }//GEN-LAST:event_selectFolderBtnActionPerformed

    private void multipleSelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multipleSelBtnActionPerformed
        filesList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
    }//GEN-LAST:event_multipleSelBtnActionPerformed

    private void zipFilesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zipFilesBtnActionPerformed
        int[] indices = filesList.getSelectedIndices();
        if (indices.length > 0) {
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            fc.setAcceptAllFileFilterUsed(false);
            int op = fc.showSaveDialog(null);
            if (op == JFileChooser.APPROVE_OPTION) {
                Compress zip = new Compress();
                for (int indice : indices) {
                    files.add(list.get(indice).getAbsolutePath());
                    names.add(list.get(indice).getName());
                }
                zip.execute();
                dialog = new JDialog();
                dialog.setLayout(new FlowLayout(FlowLayout.LEFT));
                dialog.add(progressBar);
                JButton cancelBtn = new JButton("Cancel");
                cancelBtn.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        zip.cancel(true);
                    }
                });
                dialog.add(cancelBtn);
                dialog.setSize(300, 100);
                dialog.setVisible(true);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Debes seleccionar primero un archivo", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_zipFilesBtnActionPerformed

    private void contSelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contSelBtnActionPerformed
        filesList.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
    }//GEN-LAST:event_contSelBtnActionPerformed

    private void singleSelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleSelBtnActionPerformed
        filesList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }//GEN-LAST:event_singleSelBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel SelectFolderLabel;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JRadioButton contSelBtn;
    private javax.swing.JList<String> filesList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton multipleSelBtn;
    private javax.swing.JButton selectFolderBtn;
    private javax.swing.JRadioButton singleSelBtn;
    private javax.swing.JButton zipFilesBtn;
    // End of variables declaration//GEN-END:variables
}
